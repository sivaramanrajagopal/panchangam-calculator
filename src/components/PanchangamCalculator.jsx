import React, { useState } from 'react';
import { Check, AlertCircle, Star, Moon, Calendar, Clock, Award, Info, ChevronDown, ChevronUp } from 'lucide-react';

const PanchangamCalculator = () => {
  const translations = {
    title: "ЁЯФ▒ роУроорпН роороХро╛ роХрогрокродро┐ роироо: ЁЯФ▒",
    subtitle: "тЬи рокроЮрпНроЪро╛роЩрпНроХ роорпБроХрпВро░рпНродрпНрод роХрогро┐рокрпНрокрпБ тЬи",
    thithi: "родро┐родро┐",
    varam: "ро╡ро╛ро░роорпН",
    nakshatra: "роЗройрпНро▒рпИроп роироЯрпНроЪродрпНродро┐ро░роорпН",
    birthStar: "роЬрпЖройрпНроо роироЯрпНроЪродрпНродро┐ро░роорпН",
    lagna: "ро▓роХрпНроХро┐ройроорпН",
    birthMoon: "роЬрпЖройрпНроо ро░ро╛роЪро┐",
    currentMoon: "роЗройрпНро▒рпИроп ро░ро╛роЪро┐",
    timeOfDay: "роирпЗро░роорпН",
    day: "рокроХро▓рпН",
    night: "роЗро░ро╡рпБ",
    calculate: "ЁЯФН роХрогроХрпНроХро┐роЯрпБ",
    reset: "ЁЯФД роорпАроЯрпНроЯроорпИ",
    results: "ЁЯУЬ роорпБроЯро┐ро╡рпБроХро│рпН",
    summary: "ЁЯУК роЪрпБро░рпБроХрпНроХрооро╛рой роорпБроЯро┐ро╡рпБроХро│рпН",
    taraBala: "тнР родро╛ро░ро╛ рокро▓роорпН",
    chandraBala: "ЁЯМЩ роЪроирпНродро┐ро░ рокро▓роорпН",
    pachakam: "ЁЯУЖ рокроЮрпНроЪроХроорпН",
    auspicious: "тЬЕ роЪрпБрок роорпБроХрпВро░рпНродрпНродроорпН",
    notAuspicious: "тЭМ роЪрпБрокроорпН роЗро▓рпНро▓рпИ",
    chandrashtama: "тЪая╕П роЪроирпНродро┐ро░ро╛ро╖рпНроЯроороорпН тЪая╕П",
    inputSummary: "ЁЯУЛ роЙро│рпНро│рпАроЯрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
    nakshatraNumber: "роироЯрпНроЪродрпНродро┐ро░ роОрогрпН",
    rashiNumber: "ро░ро╛роЪро┐ роОрогрпН",
    dhruvaNumber: "родрпБро░рпБро╡ роОрогрпН",
    parikaram: "рокро░ро┐роХро╛ро░роорпН",
    parikarams: "тЪая╕П рокро░ро┐роХро╛ро░роЩрпНроХро│рпН",
    compatibility: "роЗрогроХрпНроХроорпН",
    calculation: "роХрогроХрпНроХрпАроЯрпБ",
    status: "роиро┐ро▓рпИ",
    numbers: "роОрогрпНроХро│рпН",
    overallResult: "ЁЯУК роорпБроЯро┐ро╡рпБ",
    showMore: "роорпЗро▓рпБроорпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН роХро╛роЯрпНроЯрпБ",
    hideDetails: "ро╡ро┐ро╡ро░роЩрпНроХро│рпИ рооро▒рпИроХрпНроХ",
    benefic: "роЪрпБрокроорпН",
    malefic: "роЕроЪрпБрокроорпН",
    position: "роиро┐ро▓рпИ"
  };

  const nakshatras = [
    "роЕро╕рпНро╡ро┐ройро┐", "рокро░рогро┐", "роХро╛ро░рпНродрпНродро┐роХрпИ", "ро░рпЛроХро┐рогро┐", "рооро┐ро░рпБроХроЪрпАро░ро┐ро╖роорпН", "родро┐ро░рпБро╡ро╛родро┐ро░рпИ",
    "рокрпБройро░рпНрокрпВроЪроорпН", "рокрпВроЪроорпН", "роЖропро┐ро▓рпНропроорпН", "роороХроорпН", "рокрпВро░роорпН", "роЙродрпНродро┐ро░роорпН",
    "роЕро╕рпНродроорпН", "роЪро┐родрпНродро┐ро░рпИ", "роЪрпБро╡ро╛родро┐", "ро╡ро┐роЪро╛роХроорпН", "роЕройрпБро╖роорпН", "роХрпЗроЯрпНроЯрпИ",
    "роорпВро▓роорпН", "рокрпВро░ро╛роЯроорпН", "роЙродрпНродро┐ро░ро╛роЯроорпН", "родро┐ро░рпБро╡рпЛрогроорпН", "роЕро╡ро┐роЯрпНроЯроорпН", "роЪродропроорпН",
    "рокрпВро░роЯрпНроЯро╛родро┐", "роЙродрпНродро┐ро░роЯрпНроЯро╛родро┐", "ро░рпЗро╡родро┐"
  ];
  
  const rashis = [
    "роорпЗро╖роорпН", "ро░ро┐ро╖рокроорпН", "рооро┐родрпБройроорпН", "роХроЯроХроорпН", "роЪро┐роорпНроороорпН", "роХройрпНройро┐",
    "родрпБро▓ро╛роорпН", "ро╡ро┐ро░рпБроЪрпНроЪро┐роХроорпН", "родройрпБроЪрпБ", "роороХро░роорпН", "роХрпБроорпНрокроорпН", "роорпАройроорпН"
  ];

  const lagnaDhruvaValues = {
    "роорпЗро╖роорпН": "5",
    "ро░ро┐ро╖рокроорпН": "7",
    "рооро┐родрпБройроорпН": "0",
    "роХроЯроХроорпН": "0",
    "роЪро┐роорпНроороорпН": "0",
    "роХройрпНройро┐": "0",
    "родрпБро▓ро╛роорпН": "0",
    "ро╡ро┐ро░рпБроЪрпНроЪро┐роХроорпН": "0",
    "родройрпБроЪрпБ": "0",
    "роороХро░роорпН": "2",
    "роХрпБроорпНрокроорпН": "4",
    "роорпАройроорпН": "6"
  };

  const lagnas = [...rashis];
  
  const varams = [
    "роЮро╛ропро┐ро▒рпБ", "родро┐роЩрпНроХро│рпН", "роЪрпЖро╡рпНро╡ро╛ропрпН", "рокрпБродройрпН", "ро╡ро┐ропро╛ро┤ройрпН", "ро╡рпЖро│рпНро│ро┐", "роЪройро┐"
  ];
  
  const thithis = [
    "рокро┐ро░родроорпИ", "родрпБро╡ро┐родро┐ропрпИ", "родро┐ро░рпБродро┐ропрпИ", "роЪродрпБро░рпНродрпНродро┐", "рокроЮрпНроЪрооро┐", 
    "роЪро╖рпНроЯро┐", "роЪрокрпНродрооро┐", "роЕро╖рпНроЯрооро┐", "роиро╡рооро┐", "родроЪрооро┐",
    "роПроХро╛родроЪро┐", "родрпБро╡ро╛родроЪро┐", "родро┐ро░ропрпЛродроЪро┐", "роЪродрпБро░рпНродроЪро┐", "рокрпМро░рпНрогрооро┐/роЕрооро╛ро╡ро╛роЪрпИ"
  ];

  const panchagamParikaras = {
    1: "рооро┐ро░ро┐родрпБ рокроЮрпНроЪроХроорпН - рокро░ро┐роХро╛ро░роорпН: ро░родрпНродро┐рой родро╛ройроорпН",
    2: "роЕроХрпНройро┐ рокроЮрпНроЪроХроорпН - рокро░ро┐роХро╛ро░роорпН: роЪроирпНродрой родро╛ройроорпН",
    4: "ро░ро╛роЬ рокроЮрпНроЪроХроорпН - рокро░ро┐роХро╛ро░роорпН: роОро▓рпБрооро┐роЪрпНроЪрпИ родро╛ройроорпН",
    6: "роЪрпЛро░ рокроЮрпНроЪроХроорпН - рокро░ро┐роХро╛ро░роорпН: родрпАрок родро╛ройроорпН",
    8: "ро░рпЛроХ рокроЮрпНроЪроХроорпН - рокро░ро┐роХро╛ро░роорпН: родро╛ройрпНроп родро╛ройроорпН"
  };

  const [values, setValues] = useState({
    thithi: '',
    varam: '',
    nakshatra: '',
    janmaNakshatra: '',
    lagna: '',
    janmaRashi: '',
    timeOfDay: 'day',
    currentRashi: ''
  });

  const [results, setResults] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  const handleChange = (e) => {
    setValues({ ...values, [e.target.name]: e.target.value });
  };

  const handleReset = () => {
    setValues({
      thithi: '',
      varam: '',
      nakshatra: '',
      janmaNakshatra: '',
      lagna: '',
      janmaRashi: '',
      timeOfDay: 'day',
      currentRashi: ''
    });
    setResults(null);
    setShowDetails(false);
  };

  const calculateTaraBala = (janmaNakshatra, currentNakshatra) => {
    if (!janmaNakshatra || !currentNakshatra) return { isAuspicious: false };
    
    const janmaIndex = nakshatras.indexOf(janmaNakshatra);
    const currentIndex = nakshatras.indexOf(currentNakshatra);
    
    const position = (currentIndex - janmaIndex + 27) % 27 + 1;
    const nakshatraNumber1 = janmaIndex + 1;
    const nakshatraNumber2 = currentIndex + 1;
    
    // Define benefic, malefic, and neutral stars based on the document
    const beneficStars = [2, 4, 8, 9];
    const maleficStars = [3, 5, 7];
    const neutralStars = [1, 6];
    
    let status = '';
    let isAuspicious = false;
    let compatibilityInfo = '';

    if (beneficStars.includes(position)) {
      status = 'роЪрпБрокроХро░рооро╛рой родро╛ро░рпИ (Benefic - Shubha Tara)';
      isAuspicious = true;
      compatibilityInfo = 'рооро┐роХро╡рпБроорпН роиро▓рпНро▓родрпБ - рокрпБродро┐роп роорпБропро▒рпНроЪро┐роХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ';
    } else if (maleficStars.includes(position)) {
      status = 'роЕроЪрпБрокроХро░рооро╛рой родро╛ро░рпИ (Malefic - Ashubha Tara)';
      compatibilityInfo = 'родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН - роорпБроХрпНроХро┐ропрооро╛рой рокрогро┐роХро│рпБроХрпНроХрпБ роПро▒рпНро▒родро▓рпНро▓';
    } else if (neutralStars.includes(position)) {
      status = 'роироЯрпБроиро┐ро▓рпИ родро╛ро░рпИ (Neutral - Samata Tara)';
      isAuspicious = true;
      compatibilityInfo = 'рокро░ро╡ро╛ропро┐ро▓рпНро▓рпИ - роЕройрпНро▒ро╛роЯ рокрогро┐роХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ';
    } else {
      status = 'рооро▒рпНро▒ родро╛ро░рпИ - роЪро╛родро╛ро░рогрооро╛ройродрпБ';
      compatibilityInfo = 'роЪро╛родро╛ро░рог роЪрпЖропро▓рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ';
    }
    
    let parikaram = "";
    if (!isAuspicious) {
      parikaram = "родро╛ро░ро╛ рокро▓роорпН роЪро░ро┐ропро┐ро▓рпНро▓рпИ - ро╡рпЗро▒рпБ роирпЗро░родрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН";
    }
    
    return { 
      isAuspicious,
      position,
      status,
      nakshatraNumber1,
      nakshatraNumber2,
      compatibilityInfo,
      parikaram
    };
  };

  const calculateChandraBala = (janmaRashi, currentRashi, timeOfDay) => {
    if (!janmaRashi || !currentRashi) return { isAuspicious: false, strength: 0, isChandrashtama: false };
    
    const janmaIndex = rashis.indexOf(janmaRashi);
    const currentIndex = rashis.indexOf(currentRashi);
    
    const position = (currentIndex - janmaIndex + 12) % 12 + 1;
    const rashiNumber1 = janmaIndex + 1;
    const rashiNumber2 = currentIndex + 1;
    
    // Benefic and malefic positions based on document
    const beneficSigns = [1, 3, 6, 7, 10, 11];
    const dayMalefic = [4, 8, 12];
    const nightMalefic = [2, 5, 9];
    
    const maleficSigns = values.timeOfDay === 'day' ? dayMalefic : nightMalefic;
    
    let status = '';
    let isAuspicious = false;
    let compatibilityInfo = '';
    const isChandrashtama = position === 8;
    
    if (isChandrashtama) {
      status = 'роЪроирпНродро┐ро░ро╛ро╖рпНроЯроороорпН (8-роорпН роЗроЯроорпН)';
      isAuspicious = false;
      compatibilityInfo = 'рооро┐роХро╡рпБроорпН роЕроЪрпБрокроорпН - роОро▓рпНро▓ро╛ роиро┐роХро┤рпНро╡рпБроХро│рпИропрпБроорпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
    } else if (beneficSigns.includes(position)) {
      status = 'роЪрпБрокроХро░рооро╛рой роЗроЯроорпН (Benefic)';
      isAuspicious = true;
      compatibilityInfo = 'рооро┐роХро╡рпБроорпН роиро▓рпНро▓родрпБ - роЕройрпИродрпНродрпБ роиро▓рпНро▓ роХро╛ро░ро┐ропроЩрпНроХро│рпБроХрпНроХрпБроорпН роПро▒рпНро▒родрпБ';
    } else if (maleficSigns.includes(position)) {
      status = `роЕроЪрпБрокроХро░рооро╛рой роЗроЯроорпН (Malefic - ${values.timeOfDay === 'day' ? 'рокроХро▓рпН' : 'роЗро░ро╡рпБ'} роирпЗро░родрпНродро┐ро▓рпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН)`;
      isAuspicious = false;
      compatibilityInfo = `${values.timeOfDay === 'day' ? 'рокроХро▓рпН' : 'роЗро░ро╡рпБ'} роирпЗро░родрпНродро┐ро▓рпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН - роорпБроХрпНроХро┐ропрооро╛рой рокрогро┐роХро│рпБроХрпНроХрпБ роПро▒рпНро▒родро▓рпНро▓`;
    } else {
      status = 'роироЯрпБроиро┐ро▓рпИ роЗроЯроорпН (Neutral)';
      isAuspicious = true;
      compatibilityInfo = 'рокро░ро╡ро╛ропро┐ро▓рпНро▓рпИ - роЪро╛родро╛ро░рог роЪрпЖропро▓рпНроХро│рпБроХрпНроХрпБ роПро▒рпНро▒родрпБ';
    }
    
    let parikaram = "";
    if (isChandrashtama) {
      parikaram = "роЪроирпНродро┐ро░ро╛ро╖рпНроЯроороорпН - роорпБроХрпНроХро┐ропрооро╛рой рокрогро┐роХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН";
    } else if (!isAuspicious) {
      parikaram = "роЪроирпНродро┐ро░ рокро▓роорпН роЗро▓рпНро▓рпИ - ро╡рпЗро▒рпБ роирпЗро░родрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН";
    }
    
    return { 
      isAuspicious, 
      strength: isAuspicious ? 100 : 0, 
      isChandrashtama,
      position,
      rashiNumber1,
      rashiNumber2,
      status,
      compatibilityInfo,
      parikaram
    };
  };

  const calculatePanchagam = () => {
    // Basic check for required values
    if (!values.thithi || !values.varam || !values.nakshatra || !values.lagna) {
      return { 
        isAuspicious: false,
        parikaram: "роЕройрпИродрпНродрпБ роородро┐рокрпНрокрпБроХро│рпИропрпБроорпН роЙро│рпНро│ро┐роЯро╡рпБроорпН" 
      };
    }
    
    const thithiIndex = thithis.indexOf(values.thithi) + 1;
    const varamIndex = varams.indexOf(values.varam) + 1;
    const nakshatraIndex = nakshatras.indexOf(values.nakshatra) + 1;
    const dhruvaValue = parseInt(lagnaDhruvaValues[values.lagna] || '0');
    
    const sum = thithiIndex + varamIndex + nakshatraIndex + dhruvaValue;
    const remainder = sum % 9 || 9; // If remainder is 0, use 9 instead
    
    // Define favorable remainders based on document
    const favorableRemainders = [1, 4, 7, 9]; // These are good panchakam values
    const isAuspicious = favorableRemainders.includes(remainder);
    
    let parikaramInfo = '';
    if (!isAuspicious && panchagamParikaras[remainder]) {
      parikaramInfo = panchagamParikaras[remainder];
    }
    
    let compatibilityInfo = '';
    if (isAuspicious) {
      compatibilityInfo = 'роиро▓рпНро▓ роЪрпБрок роорпБроХрпВро░рпНродрпНродроорпН - роЕройрпИродрпНродрпБ роиро▓рпНро▓ роХро╛ро░ро┐ропроЩрпНроХро│рпБроХрпНроХрпБроорпН роПро▒рпНро▒родрпБ';
    } else {
      switch(remainder) {
        case 2:
          compatibilityInfo = 'роЕроХрпНройро┐ рокроЮрпНроЪроХроорпН - родрпА родрпКроЯро░рпНрокро╛рой рокрогро┐роХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
          break;
        case 3:
          compatibilityInfo = 'ро░ро╛роЬ рокроЮрпНроЪроХроорпН - роЕро░роЪрпБ роЪро╛ро░рпНроирпНрод рокрогро┐роХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
          break;
        case 5:
          compatibilityInfo = 'роЪрпЛро░ рокроЮрпНроЪроХроорпН - рокрогроорпН роЪро╛ро░рпНроирпНрод роЪрпЖропро▓рпНроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
          break;
        case 6:
          compatibilityInfo = 'ро░рпЛроХ рокроЮрпНроЪроХроорпН - роЪрпБроХро╛родро╛ро░ роЪро╛ро░рпНроирпНрод роЪрпЖропро▓рпНроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
          break;
        case 8:
          compatibilityInfo = 'рооро┐ро░ро┐родрпБ рокроЮрпНроЪроХроорпН - рокрпБродро┐родро╛роХ роОродрпИропрпБроорпН родрпКроЯроЩрпНроХ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН';
          break;
        default:
          compatibilityInfo = 'рокроЮрпНроЪроХроорпН роЪро░ро┐ропро┐ро▓рпНро▓рпИ - ро╡рпЗро▒рпБ роирпЗро░родрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН';
      }
    }
    
    return { 
      isAuspicious,
      remainder,
      thithiIndex,
      varamIndex,
      nakshatraIndex,
      dhruvaValue,
      parikaramInfo,
      compatibilityInfo
    };
  };

  const handleCalculate = () => {
    const taraBala = calculateTaraBala(values.janmaNakshatra, values.nakshatra);
    const chandraBala = calculateChandraBala(values.janmaRashi, values.currentRashi, values.timeOfDay);
    const panchagam = calculatePanchagam();
    setResults({ taraBala, chandraBala, panchagam, inputValues: {...values} });
    setShowDetails(false);
  };

  const toggleDetails = () => {
    setShowDetails(!showDetails);
  };

  const SelectField = ({ label, name, value, options, icon, onChange }) => (
    <div className="mb-4">
      <label className="block text-gray-700 font-medium mb-2 flex items-center">
        {icon}
        <span className="ml-2">{label}</span>
      </label>
      <select
        name={name}
        value={value}
        onChange={onChange}
        className="w-full border border-gray-300 rounded p-2 focus:outline-none focus:ring-2 focus:ring-yellow-500"
      >
        <option value="">-- родрпЗро░рпНроирпНродрпЖроЯрпБ --</option>
        {options.map((option, index) => (
          <option key={index} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );

  const RadioGroup = ({ label, name, value, options, onChange, icon }) => (
    <div className="mb-4">
      <label className="block text-gray-700 font-medium mb-2 flex items-center">
        {icon}
        <span className="ml-2">{label}</span>
      </label>
      <div className="flex space-x-4">
        {Object.entries(options).map(([key, text]) => (
          <label key={key} className="inline-flex items-center">
            <input
              type="radio"
              name={name}
              value={key}
              checked={value === key}
              onChange={onChange}
              className="form-radio h-4 w-4 text-yellow-600"
            />
            <span className="ml-2">{text}</span>
          </label>
        ))}
      </div>
    </div>
  );

  // Helper function to get all necessary remedies
  const getParikarams = () => {
    if (!results) return [];
    
    const parikarams = [];
    
    if (results.taraBala && !results.taraBala.isAuspicious && results.taraBala.parikaram) {
      parikarams.push(results.taraBala.parikaram);
    }
    
    if (results.chandraBala && !results.chandraBala.isAuspicious && results.chandraBala.parikaram) {
      parikarams.push(results.chandraBala.parikaram);
    }
    
    if (results.panchagam && !results.panchagam.isAuspicious && results.panchagam.parikaramInfo) {
      parikarams.push(results.panchagam.parikaramInfo);
    }
    
    return parikarams;
  };

  // Check if overall result is auspicious
  const isOverallAuspicious = results && 
    results.taraBala?.isAuspicious && 
    results.chandraBala?.isAuspicious && 
    results.panchagam?.isAuspicious;

  return (
    <div className="w-full flex justify-center"> {/* New wrapper div */}
     <div className="bg-yellow-50 rounded-lg shadow-lg overflow-hidden max-w-md mx-auto" style={{margin: '0 auto'}}>
      <div className="bg-orange-500 p-4 text-center">
        <h1 className="text-2xl font-bold text-white">{translations.title}</h1>
        <h2 className="text-white text-lg">{translations.subtitle}</h2>
      </div>

      <div className="p-6">
        <div className="grid grid-cols-1 gap-4">
          <SelectField
            label={translations.birthStar}
            name="janmaNakshatra"
            value={values.janmaNakshatra}
            options={nakshatras}
            onChange={handleChange}
            icon={<Star className="w-5 h-5 text-yellow-500" />}
          />
          
          <SelectField
            label={translations.nakshatra}
            name="nakshatra"
            value={values.nakshatra}
            options={nakshatras}
            onChange={handleChange}
            icon={<Star className="w-5 h-5 text-yellow-500" />}
          />
          
          <SelectField
            label={translations.birthMoon}
            name="janmaRashi"
            value={values.janmaRashi}
            options={rashis}
            onChange={handleChange}
            icon={<Moon className="w-5 h-5 text-blue-500" />}
          />
          
          <SelectField
            label={translations.currentMoon}
            name="currentRashi"
            value={values.currentRashi}
            options={rashis}
            onChange={handleChange}
            icon={<Moon className="w-5 h-5 text-blue-500" />}
          />
          
          <SelectField
            label={translations.thithi}
            name="thithi"
            value={values.thithi}
            options={thithis}
            onChange={handleChange}
            icon={<Calendar className="w-5 h-5 text-green-500" />}
          />
          
          <SelectField
            label={translations.varam}
            name="varam"
            value={values.varam}
            options={varams}
            onChange={handleChange}
            icon={<Calendar className="w-5 h-5 text-green-500" />}
          />
          
          <SelectField
            label={translations.lagna}
            name="lagna"
            value={values.lagna}
            options={lagnas}
            onChange={handleChange}
            icon={<Calendar className="w-5 h-5 text-green-500" />}
          />
          
          <RadioGroup
            label={translations.timeOfDay}
            name="timeOfDay"
            value={values.timeOfDay}
            options={{ day: translations.day, night: translations.night }}
            onChange={handleChange}
            icon={<Clock className="w-5 h-5 text-blue-500" />}
          />

          <div className="flex space-x-2 mt-2">
            <button 
              onClick={handleCalculate} 
              className="flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded flex items-center justify-center"
              disabled={!values.janmaNakshatra || !values.nakshatra || !values.janmaRashi || !values.currentRashi}
            >
              {translations.calculate}
            </button>
            <button 
              onClick={handleReset} 
              className="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded flex items-center justify-center"
            >
              {translations.reset}
            </button>
        </div>
        </div>

        {results && (
          <div className="mt-6 p-4 bg-white rounded-lg shadow border border-yellow-200">
            {/* Input Summary - Kept as is but collapsible */}
            <div className="mb-4">
              <div className="flex justify-between items-center cursor-pointer" onClick={() => setShowDetails(!showDetails)}>
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <Info className="w-5 h-5 text-blue-500 mr-2" />
                  {translations.inputSummary}
                </h3>
                {showDetails ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
              </div>
              
              {showDetails && (
                <div className="mt-2 p-3 bg-gray-50 rounded-lg text-sm">
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <p><strong>{translations.birthStar}:</strong> {results.inputValues.janmaNakshatra}</p>
                      <p><strong>{translations.nakshatra}:</strong> {results.inputValues.nakshatra}</p>
                      <p><strong>{translations.birthMoon}:</strong> {results.inputValues.janmaRashi}</p>
                      <p><strong>{translations.currentMoon}:</strong> {results.inputValues.currentRashi}</p>
                    </div>
                    <div>
                      <p><strong>{translations.thithi}:</strong> {results.inputValues.thithi || "-"}</p>
                      <p><strong>{translations.varam}:</strong> {results.inputValues.varam || "-"}</p>
                      <p><strong>{translations.lagna}:</strong> {results.inputValues.lagna || "-"}</p>
                      <p><strong>{translations.timeOfDay}:</strong> {
                        results.inputValues.timeOfDay === 'day' ? translations.day : translations.night
                      }</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            {/* Prominent Overall Result */}
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                <Award className="w-5 h-5 text-yellow-500 mr-2" />
                {translations.overallResult}
              </h3>
              
              <div className={`p-4 rounded-lg text-center ${isOverallAuspicious ? 'bg-green-100' : 'bg-red-100'}`}>
                <div className="text-2xl font-bold mb-1">
                  {isOverallAuspicious ? 'тЬЕ ' + translations.auspicious : 'тЪая╕П ' + translations.notAuspicious}
                </div>
                <div className={`text-sm ${isOverallAuspicious ? 'text-green-800' : 'text-red-800'}`}>
                  {isOverallAuspicious 
                    ? 'роЗроирпНрод роирпЗро░роорпН роЕройрпИродрпНродрпБ роиро▓рпНро▓ роХро╛ро░ро┐ропроЩрпНроХро│рпБроХрпНроХрпБроорпН роПро▒рпНро▒родрпБ'
                    : 'роЗроирпНрод роирпЗро░родрпНродро┐ро▓рпН роорпБроХрпНроХро┐ропрооро╛рой роорпБроЯро┐ро╡рпБроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН'}
                </div>
              </div>
            </div>
            
            {/* Simplified Results Table */}
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                <Award className="w-5 h-5 text-yellow-500 mr-2" />
                {translations.summary}
              </h3>
              
              <div className="overflow-hidden rounded-lg border border-gray-200">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-3 py-2 text-sm font-medium text-gray-500">{translations.calculation}</th>
                      <th scope="col" className="px-3 py-2 text-sm font-medium text-gray-500">{translations.status}</th>
                      <th scope="col" className="px-3 py-2 text-sm font-medium text-gray-500">{translations.numbers}</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    <tr>
                      <td className="px-3 py-2 text-sm font-medium text-gray-800">{translations.taraBala}</td>
                      <td className="px-3 py-2 text-sm">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          results.taraBala?.isAuspicious ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {results.taraBala?.isAuspicious ? 'тЬЕ' : 'тЭМ'}
                        </span>
                      </td>
                      <td className="px-3 py-2 text-sm text-gray-500">
                        {results.taraBala?.position} ({results.taraBala?.isAuspicious ? translations.benefic : translations.malefic})
                      </td>
                    </tr>
                    <tr>
                      <td className="px-3 py-2 text-sm font-medium text-gray-800">{translations.chandraBala}</td>
                      <td className="px-3 py-2 text-sm">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          results.chandraBala?.isAuspicious ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {results.chandraBala?.isAuspicious ? 'тЬЕ' : 'тЭМ'}
                        </span>
                      </td>
                      <td className="px-3 py-2 text-sm text-gray-500">
                        {results.chandraBala?.position} ({results.chandraBala?.isChandrashtama ? 'роЪроирпНродро┐ро░ро╛ро╖рпНроЯроороорпН' : 
                          results.chandraBala?.isAuspicious ? translations.benefic : translations.malefic})
                      </td>
                    </tr>
                    <tr>
                      <td className="px-3 py-2 text-sm font-medium text-gray-800">{translations.pachakam}</td>
                      <td className="px-3 py-2 text-sm">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          results.panchagam?.isAuspicious ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {results.panchagam?.isAuspicious ? 'тЬЕ' : 'тЭМ'}
                        </span>
                      </td>
                      <td className="px-3 py-2 text-sm text-gray-500">
                        {results.panchagam?.remainder} ({results.panchagam?.isAuspicious ? translations.benefic : translations.malefic})
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            
            {/* Remedies Section */}
            {getParikarams().length > 0 && (
              <div className="mb-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-2 flex items-center">
                  <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
                  {translations.parikarams}
                </h3>
                
                <div className="p-3 bg-red-50 rounded-lg text-sm text-red-800">
                  <ul className="space-y-1 list-disc list-inside">
                    {getParikarams().map((parikaram, index) => (
                      <li key={index}>{parikaram}</li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
            
            {/* Toggle Details Button */}
            <button
              onClick={toggleDetails}
              className="w-full mt-4 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded flex items-center justify-center"
            >
              {showDetails ? 
                <><ChevronUp className="w-4 h-4 mr-1" />{translations.hideDetails}</> : 
                <><ChevronDown className="w-4 h-4 mr-1" />{translations.showMore}</>
              }
            </button>
            
            {/* Detailed Results - Shown only if expanded */}
            {showDetails && (
              <div className="mt-4 space-y-3">
                {/* Tara Bala Details */}
                <div className="p-2 rounded bg-gray-50">
                  <div className="font-medium text-gray-800 mb-1">{translations.taraBala} - {translations.position}: {results.taraBala?.position}</div>
                  <div className="text-sm grid grid-cols-2 gap-2">
                    <div className="text-gray-600">
                      <p><strong>{translations.nakshatraNumber} (роЬрпЖройрпНроо):</strong> {results.taraBala?.nakshatraNumber1}</p>
                      <p><strong>{translations.nakshatraNumber} (роЗройрпНро▒рпБ):</strong> {results.taraBala?.nakshatraNumber2}</p>
                    </div>
                    <div className="text-gray-600">
                      <p><strong>роиро┐ро▓рпИ:</strong> {results.taraBala?.status}</p>
                      <p className={results.taraBala?.isAuspicious ? "text-green-600" : "text-red-600"}>
                        <strong>{translations.compatibility}:</strong> {results.taraBala?.compatibilityInfo}
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Chandra Bala Details */}
                <div className="p-2 rounded bg-gray-50">
                  <div className="font-medium text-gray-800 mb-1">{translations.chandraBala} - {translations.position}: {results.chandraBala?.position}</div>
                  <div className="text-sm grid grid-cols-2 gap-2">
                    <div className="text-gray-600">
                      <p><strong>{translations.rashiNumber} (роЬрпЖройрпНроо):</strong> {results.chandraBala?.rashiNumber1}</p>
                      <p><strong>{translations.rashiNumber} (роЗройрпНро▒рпБ):</strong> {results.chandraBala?.rashiNumber2}</p>
                    </div>
                    <div className="text-gray-600">
                      <p><strong>роиро┐ро▓рпИ:</strong> {results.chandraBala?.status}</p>
                      <p className={results.chandraBala?.isAuspicious ? "text-green-600" : "text-red-600"}>
                        <strong>{translations.compatibility}:</strong> {results.chandraBala?.compatibilityInfo}
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Panchagam Details */}
                <div className="p-2 rounded bg-gray-50">
                  <div className="font-medium text-gray-800 mb-1">{translations.pachakam} - рооро┐роХрпБродро┐ роОрогрпН: {results.panchagam?.remainder}</div>
                  <div className="text-sm grid grid-cols-2 gap-2">
                    <div className="text-gray-600">
                      <p><strong>родро┐родро┐ роОрогрпН:</strong> {results.panchagam?.thithiIndex}</p>
                      <p><strong>ро╡ро╛ро░роорпН роОрогрпН:</strong> {results.panchagam?.varamIndex}</p>
                      <p><strong>{translations.nakshatraNumber}:</strong> {results.panchagam?.nakshatraIndex}</p>
                    </div>
                    <div className="text-gray-600">
                      <p><strong>{translations.dhruvaNumber}:</strong> {results.panchagam?.dhruvaValue}</p>
                      <p className={results.panchagam?.isAuspicious ? "text-green-600" : "text-red-600"}>
                        <strong>{translations.compatibility}:</strong> {results.panchagam?.compatibilityInfo}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
    </div>
  );
};

export default PanchangamCalculator;